from aiogram import Router, F
import asyncio
from create_bot import bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile,ReplyKeyboardRemove,CallbackQuery
from keyboards.all_kb import main_kb,b_models,works_edit_kb,works_groups,return_works_kb,m_or_e_kb,spares_groups,return_spares_kb
from aiogram.utils.chat_action import ChatActionSender
from validators.validators import name_validate,phone_validate,act_validate,model_validate,id_validate,iot_validate,bycycle_type_validate,work_is_true
import pandas as pd
start_photo = FSInputFile('media/sticker.webm', filename='—Ö—É–π')
prikol = FSInputFile('media/prikol.mp4', filename='—Ö—É–π')
client_work_keys = ['work_type','full_name','phone_number','act_id','b_model','b_id','iot_id']
client_work = ['','','–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ','–ê–∫—Ç ‚Ññ','–ú–æ–¥–µ–ª—å –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞: ','–ù–æ–º–µ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞: ', 'IoT: ']
async def info(state):
    data = await state.get_data()
    s = f"<b>–ú–∞—Å—Ç–µ—Ä:</b> {data['employer']} | {data['start_time']}\n\n"
    for q,w in enumerate(client_work_keys):
        if w in data:
            if client_work[q]:
                s+=f"<b>{client_work[q]}</b> {data[w]}\n"
            else:
                s+=f"<b>{data[w]}\n</b>"
    s+='\n<b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:</b>\n'
    if data['works']==[]:
        for i in range(3):
            print('fdddddddddddddddddddd')
            s+='____________\n'
    else:
        for i in data['works']:
            if i not in data['works_count']:
                s+=f"{i}\n"
            else:
                if data['works_count'][i]==1:
                    s += f"{i}\n"
                else:
                    s += f"{i} ({data['works_count'][i]}x)\n"
    s+="\n<b>–ó–∞–ø—á–∞—Å—Ç–∏:</b>\n"
    if data['spares']==[]:
        for i in range(3):
            print('fdddddddddddddddddddd')
            s+='____________\n'
        else:
            for i in data['spares']:
                if i not in data['works_count']:
                    s += f"{i}\n"
                else:
                    if data['works_count'][i] == 1:
                        s += f"{i}\n"
                    else:
                        s += f"{i} ({data['works_count'][i]}x)\n"

    else:
        for i in data['spares']:
            s+=f"{i}\n"
    s+=f"\n<b>–ù–æ—Ä–º–∞ —á–∞—Å—ã:</b> {sum(data['norm_time'])}üë∫"
    return s

class Form(StatesGroup):
    client_start = State()
    full_name = State()
    phone_number = State()
    act_id = State()
    b_or_e = State()
    b_model = State()
    b_id = State()
    iot_id = State()
    find_works = State()
    find_work = State()
    add_work  = State()
    find_spare = State()
    add_spare = State()
    find_spares = State()
    wait = State()
start  = Router()
questionnaire_router = Router()

df = pd.read_excel('works_norm.xlsx',names = ['work','time','type','sale','group'])
df_spare = pd.read_excel('spares.xlsx',names = ['spare','type','group'])
async def init_work(state,message):
    await state.update_data(works=[], user_id=message.from_user.id)
    await state.update_data(spares=[], user_id=message.from_user.id)
    await state.update_data(works_count={}, user_id=message.from_user.id)
    await state.update_data(sum_norm_time=0, user_id=message.from_user.id)
    await state.update_data(a=[], user_id=message.from_user.id)
    await state.update_data(norm_time=[], user_id=message.from_user.id)
    print_data = await info(state)
    await message.answer(print_data, reply_markup=works_edit_kb())
    await state.set_state(Form.wait)

#–ù–ê–ß–ê–õ–û
@start.message(Command('start'))
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer_photo(photo=FSInputFile('media/1.jpg', filename='–°–Ω–µ–≥–æ–≤–∏–∫'),caption = '–ü—Ä–∏–≤–µ—Ç —è —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–Ω–µ—Å–µ–Ω–∏—é —Ä–µ–º–æ–Ω—Ç–æ–≤. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup=main_kb(message.from_user.id))
    await state.set_state(Form.client_start)
#–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
@start.message(F.text=='‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å') #–ù–ê–ß–ê–õ–û
async def start_questionnaire_process(message: Message, state: FSMContext):
    await message.answer_video(prikol)
#–¢–û
@questionnaire_router.message(F.text=='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',Form.client_start)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(work_type=message.text, user_id=message.from_user.id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await state.update_data(start_time = message.date.strftime("%Y-%m-%d %H:%M:%S"))
        await state.update_data(employer=message.from_user.full_name)
        await message.answer('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞–∫—Ç–∞: ', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.act_id)
#–ö–õ–ò–ï–ù–¢–°–ö–ò–ô –†–ï–ú–û–ù–¢
@questionnaire_router.message(F.text=='–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç',Form.client_start)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(work_type=message.text, user_id=message.from_user.id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await state.update_data(start_time=message.date.strftime("%Y-%m-%d %H:%M:%S"))
        await state.update_data(employer=message.from_user.full_name)
        await state.update_data(message_id = message.from_user.id+1)
        await message.answer('–í–≤–µ–¥–∏ –§–ò–û:', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.full_name)
#–§–ò–û
@questionnaire_router.message(F.text,Form.full_name)
async def start_questionnaire_process(message: Message, state: FSMContext):
    if not name_validate(message.text):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á:")
        return
    await state.update_data(full_name=message.text, user_id=message.from_user.id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.phone_number)
#–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê
@questionnaire_router.message(F.text,Form.phone_number)
async def start_questionnaire_process(message: Message, state: FSMContext):
    if not phone_validate(message.text):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX")
        return
    await state.update_data(phone_number=message.text, user_id=message.from_user.id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer('–ù–æ–º–µ—Ä –∞–∫—Ç–∞:', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.act_id)
#–ù–û–ú–ï–† –ê–ö–¢–ê
@questionnaire_router.message(F.text,Form.act_id)
async def start_questionnaire_process(message: Message, state: FSMContext):
    if not act_validate(message.text):
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(act_id=message.text, user_id=message.from_user.id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ–ª–æ–∏—Å–ø–µ–¥–∞:', reply_markup=m_or_e_kb())
    await state.set_state(Form.b_or_e)
#–ú–ï–•–ê–ù–ò–ö–ê –ò–õ–ò –≠–õ–ï–ö–¢–†–û
@questionnaire_router.message(F.text,Form.b_or_e)
async def start_questionnaire_process(message: Message, state: FSMContext):

    if not bycycle_type_validate(message.text):
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",reply_markup=m_or_e_kb())
        return

    await state.update_data(m_or_e=message.text, user_id=message.from_user.id)
    data = await state.get_data()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞:', reply_markup=b_models(data['m_or_e']))
    await state.set_state(Form.b_model)
#–ú–û–î–ï–õ–¨ –í–ï–õ–ò–ö–ê
@questionnaire_router.message(F.text,Form.b_model)
async def start_questionnaire_process(message: Message, state: FSMContext):
    data = await state.get_data()
    if not model_validate(message.text):
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup=b_models(data['m_or_e']))
        return
    # await message.reply("–≤—ã–≤—ã—ã–≤–≤—ã—ã–≤")
    # await state.update_data(b_model=message.text, user_id=message.from_user.id)
    # async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
    #     await message.answer('–ù–æ–º–µ—Ä –∞–∫—Ç–∞:', reply_markup=ReplyKeyboardRemove())
    # await state.set_state(Form.act_id)
#–ú–û–î–ï–õ–¨ –í–ï–õ–ò–ö–ê –§–û–†–ú–ê
@questionnaire_router.callback_query(F.data, Form.b_model)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await state.update_data(b_model=call.data)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('–ù–æ–º–µ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞:')
    await state.set_state(Form.b_id)
#–ù–û–ú–ï–† –í–ï–õ–û–°–ò–ü–ï–î–ê
@questionnaire_router.message(F.text,Form.b_id)
async def start_questionnaire_process(message: Message, state: FSMContext):
    if not id_validate(message.text):
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–µ–ª–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(b_id=message.text, user_id=message.from_user.id)
    if await state.get_value('m_or_e') != '–ú–µ—Ö–∞–Ω–∏–∫–∞':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä IoT –º–æ–¥—É–ª—è:', reply_markup=None)
        await state.set_state(Form.iot_id)
    else:
        await init_work(state,message)
#–ù–û–ú–ï–† IOT
@questionnaire_router.message(F.text,Form.iot_id)
async def start_questionnaire_process(message: Message, state: FSMContext):
    if not iot_validate(message.text):
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä IoT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(iot_id=message.text, user_id=message.from_user.id)
    await init_work(state,message)






#=======================================================================================================



