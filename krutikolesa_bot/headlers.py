from telebot import types
from krutikolesa_bot.models import ClientWork
from models import Work,ClientWork
from keyboards import WORK_TYPE_BUTTON,BYCYCLE_MODEL_BUTTON,BACK_BUTTON
works = {}
states = {}
print('ffffffffffffffffffffff')
def main(message,bot):

    main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_repair = types.KeyboardButton("–ù–∞—á–∞—Ç—å —Ä–µ–º–æ–Ω—Çüë∞üèº")
    button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    main.add(start_repair, button2)
    bot.send_message(message.from_user.id, "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=main)
    message_id = message.id
    print(message_id)
def get_start(message,bot):
    print(message.from_user.id)
    if message.from_user.id not in states:
        states[message.from_user.id] = 'none'
    print(message)
    states[message.from_user.id] = 'getting_type'
    bot.send_message(message.from_user.id, "–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=WORK_TYPE_BUTTON)
def get_work_type(message,bot):
    bot.send_message(message.from_user.id, "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞",reply_markup=BACK_BUTTON)
    states[message.from_user.id] = 'getting_client_name'
    works[message.from_user.id] = ClientWork(message.from_user.id,f"{message.from_user.first_name} {message.from_user.first_name}")
    works[message.from_user.id].print_params.append(['client_name','<b>–ö–ª–∏–µ–Ω—Ç: </b>'])
def get_client_name(message,bot):
    print('ffff')
    works[message.from_user.id].client_name = message.text
    works[message.from_user.id].print_params.append(['client_phone', '\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: </b>'])
    bot.send_message(message.from_user.id, works[message.from_user.id].info(),parse_mode="html",reply_markup=BACK_BUTTON)
    states[message.from_user.id] = 'getting_client_phone'
def get_client_phone(message,bot):
    works[message.from_user.id].client_phone = message.text
    works[message.from_user.id].print_params.append(['act', '\n<b>–ù–æ–º–µ—Ä –∞–∫—Ç–∞: </b>'])
    bot.send_message(message.from_user.id, works[message.from_user.id].info(),parse_mode="html",reply_markup=BACK_BUTTON)
    states[message.from_user.id] = 'getting_act'

def get_act(message,bot):
    works[message.from_user.id].act = message.text
    works[message.from_user.id].print_params.append(['bycycle_model', '\n<b>–ú–æ–¥–µ–ª—å –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞: </b>'])


    bot.send_message(message.from_user.id, works[message.from_user.id].info(), reply_markup=BYCYCLE_MODEL_BUTTON, parse_mode="html")
    states[message.from_user.id] = 'getting_bycycle_model'
def get_bycycle_model(message,bot):
    print('–•—É–π')
    works[message.from_user.id].bycycle_model  = message.text
    works[message.from_user.id].print_params.append(['bycycle_id', '\n<b>–ù–æ–º–µ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞: </b>'])
    bot.send_message(message.from_user.id, works[message.from_user.id].info(),parse_mode="html",reply_markup=BACK_BUTTON)
    states[message.from_user.id] = 'getting_bycycle_id'
def get_bycyle_id(message,bot):
    works[message.from_user.id].bycycle_id = message.text
    works[message.from_user.id].print_params.append(['iot_id', '\n<b>–ù–æ–º–µ—Ä iot –º–æ–¥—É–ª—è: </b>'])
    bot.send_message(message.from_user.id, works[message.from_user.id].info(),parse_mode="html",reply_markup=BACK_BUTTON)
    states[message.from_user.id] = 'getting_iot'
def get_iot(message,bot):
    works[message.from_user.id].iot_id = message.text
    bot.send_message(message.from_user.id, works[message.from_user.id].info(),parse_mode="html",reply_markup=BACK_BUTTON)
    states[message.from_user.id] = 'getted_info'
def headler(message,bot):
    if message.text=='/start' or message.text=='–ù–∞–∑–∞–¥':
        main(message,bot)
    elif message.text == '–ù–∞—á–∞—Ç—å —Ä–µ–º–æ–Ω—Çüë∞üèº':
        get_start(message,bot)
    elif message.text == '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç':
        get_work_type(message,bot)
    elif states[message.from_user.id] == 'getting_client_name':
        get_client_name(message,bot)
    elif states[message.from_user.id] == 'getting_client_phone':
        get_client_phone(message,bot)
    elif states[message.from_user.id] == 'getting_act':
        get_act(message,bot)
    elif states[message.from_user.id] == 'getting_bycycle_model':
        get_bycycle_model(message,bot)
    elif states[message.from_user.id] == 'getting_bycycle_id':
        get_bycyle_id(message,bot)
    elif states[message.from_user.id] == 'getting_iot':
        get_iot(message,bot)
    bot.delete_message(message.chat.id, message.message_id)
    bot.delete_message(message.chat.id, message.message_id - 1)




    print(states)

